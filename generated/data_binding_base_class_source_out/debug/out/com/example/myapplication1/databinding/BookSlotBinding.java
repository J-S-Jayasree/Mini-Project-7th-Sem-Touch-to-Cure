// Generated by view binder compiler. Do not edit!
package com.example.myapplication1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication1.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BookSlotBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button button4;

  @NonNull
  public final CheckBox ch1;

  @NonNull
  public final CheckBox ch2;

  @NonNull
  public final CheckBox ch3;

  @NonNull
  public final CheckBox ch4;

  @NonNull
  public final ImageView imageView6;

  @NonNull
  public final TextView textView4;

  @NonNull
  public final TextView textView5;

  private BookSlotBinding(@NonNull LinearLayout rootView, @NonNull Button button4,
      @NonNull CheckBox ch1, @NonNull CheckBox ch2, @NonNull CheckBox ch3, @NonNull CheckBox ch4,
      @NonNull ImageView imageView6, @NonNull TextView textView4, @NonNull TextView textView5) {
    this.rootView = rootView;
    this.button4 = button4;
    this.ch1 = ch1;
    this.ch2 = ch2;
    this.ch3 = ch3;
    this.ch4 = ch4;
    this.imageView6 = imageView6;
    this.textView4 = textView4;
    this.textView5 = textView5;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BookSlotBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BookSlotBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.book_slot, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BookSlotBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button4;
      Button button4 = ViewBindings.findChildViewById(rootView, id);
      if (button4 == null) {
        break missingId;
      }

      id = R.id.ch1;
      CheckBox ch1 = ViewBindings.findChildViewById(rootView, id);
      if (ch1 == null) {
        break missingId;
      }

      id = R.id.ch2;
      CheckBox ch2 = ViewBindings.findChildViewById(rootView, id);
      if (ch2 == null) {
        break missingId;
      }

      id = R.id.ch3;
      CheckBox ch3 = ViewBindings.findChildViewById(rootView, id);
      if (ch3 == null) {
        break missingId;
      }

      id = R.id.ch4;
      CheckBox ch4 = ViewBindings.findChildViewById(rootView, id);
      if (ch4 == null) {
        break missingId;
      }

      id = R.id.imageView6;
      ImageView imageView6 = ViewBindings.findChildViewById(rootView, id);
      if (imageView6 == null) {
        break missingId;
      }

      id = R.id.textView4;
      TextView textView4 = ViewBindings.findChildViewById(rootView, id);
      if (textView4 == null) {
        break missingId;
      }

      id = R.id.textView5;
      TextView textView5 = ViewBindings.findChildViewById(rootView, id);
      if (textView5 == null) {
        break missingId;
      }

      return new BookSlotBinding((LinearLayout) rootView, button4, ch1, ch2, ch3, ch4, imageView6,
          textView4, textView5);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
